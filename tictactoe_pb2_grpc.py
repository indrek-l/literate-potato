# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import tictactoe_pb2 as tictactoe__pb2


class TicTacToeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.init_leader = channel.unary_unary(
                '/TicTacToe/init_leader',
                request_serializer=tictactoe__pb2.InitLeaderRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.InitLeaderResponse.FromString,
                )
        self.election = channel.unary_unary(
                '/TicTacToe/election',
                request_serializer=tictactoe__pb2.ElectionRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.ElectionResponse.FromString,
                )
        self.get_node_time = channel.unary_unary(
                '/TicTacToe/get_node_time',
                request_serializer=tictactoe__pb2.GetNodeTimeRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.GetNodeTimeResponse.FromString,
                )
        self.set_symbol = channel.unary_unary(
                '/TicTacToe/set_symbol',
                request_serializer=tictactoe__pb2.SetSymbolRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.SetSymbolResponse.FromString,
                )
        self.list_board = channel.unary_unary(
                '/TicTacToe/list_board',
                request_serializer=tictactoe__pb2.ListBoardRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.ListBoardResponse.FromString,
                )
        self.set_node_time = channel.unary_unary(
                '/TicTacToe/set_node_time',
                request_serializer=tictactoe__pb2.SetNodeTimeRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.SetNodeTimeResponse.FromString,
                )
        self.check_winner = channel.unary_unary(
                '/TicTacToe/check_winner',
                request_serializer=tictactoe__pb2.CheckWinnerRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.CheckWinnerResponse.FromString,
                )
        self.check_timeout = channel.unary_unary(
                '/TicTacToe/check_timeout',
                request_serializer=tictactoe__pb2.CheckTimeoutRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.CheckTimeoutResponse.FromString,
                )


class TicTacToeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def init_leader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def election(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_node_time(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_symbol(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_board(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_node_time(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def check_winner(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def check_timeout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TicTacToeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'init_leader': grpc.unary_unary_rpc_method_handler(
                    servicer.init_leader,
                    request_deserializer=tictactoe__pb2.InitLeaderRequest.FromString,
                    response_serializer=tictactoe__pb2.InitLeaderResponse.SerializeToString,
            ),
            'election': grpc.unary_unary_rpc_method_handler(
                    servicer.election,
                    request_deserializer=tictactoe__pb2.ElectionRequest.FromString,
                    response_serializer=tictactoe__pb2.ElectionResponse.SerializeToString,
            ),
            'get_node_time': grpc.unary_unary_rpc_method_handler(
                    servicer.get_node_time,
                    request_deserializer=tictactoe__pb2.GetNodeTimeRequest.FromString,
                    response_serializer=tictactoe__pb2.GetNodeTimeResponse.SerializeToString,
            ),
            'set_symbol': grpc.unary_unary_rpc_method_handler(
                    servicer.set_symbol,
                    request_deserializer=tictactoe__pb2.SetSymbolRequest.FromString,
                    response_serializer=tictactoe__pb2.SetSymbolResponse.SerializeToString,
            ),
            'list_board': grpc.unary_unary_rpc_method_handler(
                    servicer.list_board,
                    request_deserializer=tictactoe__pb2.ListBoardRequest.FromString,
                    response_serializer=tictactoe__pb2.ListBoardResponse.SerializeToString,
            ),
            'set_node_time': grpc.unary_unary_rpc_method_handler(
                    servicer.set_node_time,
                    request_deserializer=tictactoe__pb2.SetNodeTimeRequest.FromString,
                    response_serializer=tictactoe__pb2.SetNodeTimeResponse.SerializeToString,
            ),
            'check_winner': grpc.unary_unary_rpc_method_handler(
                    servicer.check_winner,
                    request_deserializer=tictactoe__pb2.CheckWinnerRequest.FromString,
                    response_serializer=tictactoe__pb2.CheckWinnerResponse.SerializeToString,
            ),
            'check_timeout': grpc.unary_unary_rpc_method_handler(
                    servicer.check_timeout,
                    request_deserializer=tictactoe__pb2.CheckTimeoutRequest.FromString,
                    response_serializer=tictactoe__pb2.CheckTimeoutResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TicTacToe', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TicTacToe(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def init_leader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TicTacToe/init_leader',
            tictactoe__pb2.InitLeaderRequest.SerializeToString,
            tictactoe__pb2.InitLeaderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def election(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TicTacToe/election',
            tictactoe__pb2.ElectionRequest.SerializeToString,
            tictactoe__pb2.ElectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_node_time(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TicTacToe/get_node_time',
            tictactoe__pb2.GetNodeTimeRequest.SerializeToString,
            tictactoe__pb2.GetNodeTimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_symbol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TicTacToe/set_symbol',
            tictactoe__pb2.SetSymbolRequest.SerializeToString,
            tictactoe__pb2.SetSymbolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_board(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TicTacToe/list_board',
            tictactoe__pb2.ListBoardRequest.SerializeToString,
            tictactoe__pb2.ListBoardResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_node_time(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TicTacToe/set_node_time',
            tictactoe__pb2.SetNodeTimeRequest.SerializeToString,
            tictactoe__pb2.SetNodeTimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def check_winner(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TicTacToe/check_winner',
            tictactoe__pb2.CheckWinnerRequest.SerializeToString,
            tictactoe__pb2.CheckWinnerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def check_timeout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TicTacToe/check_timeout',
            tictactoe__pb2.CheckTimeoutRequest.SerializeToString,
            tictactoe__pb2.CheckTimeoutResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
